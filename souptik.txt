//ORIGINAL METHOD
def cheapestflight(n, flights, src, dst, K)
{
	list<int> pricelist;
	int price = 0;
	int count = 1;
	solve(count, flights, src, dst, price, pricelist, K);
	pricelist.sort();
	if (priselist.size() != 0)
	{
		return pricelist[0];
	}
	else
	{
		return -1;
	}
}


//HELPER METHOD THAT DOES SOLUTION
def solve(count, allpaths, start, end, price, pricelist, k)
{
	for (path in allpaths)
	{
		if (start in path and end in path)
		{
			if (count <= k)
			{
				pricelist.add(price);
				price = 0;
				count = 0;
			}
			else
			{
				count = 0;
			}
		}
		if start in pathand end not in path
		{
			count++;
			remaining = path[1 - path.index(start)];
			pathsleft = [tmp for tmp in allpaths if tmp != path];
			solve(count, pathsleft, remaining, end, price + path[2], pricelist, k);
		}
	}

}